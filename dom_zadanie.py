#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –í–∏–∫–∏–ø–µ–¥–∏–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium
–§—É–Ω–∫—Ü–∏–∏: –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π, —á—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç–∞—Ç—å—è–º
–ê–≤—Ç–æ—Ä: –°–æ–∑–¥–∞–Ω–æ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
"""

import os
import time
import random
import textwrap
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.options import Options
from selenium.common.exceptions import (
    TimeoutException, 
    NoSuchElementException, 
    WebDriverException
)


class WikipediaNavigator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –í–∏–∫–∏–ø–µ–¥–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç–∞—Ç—å—è–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Firefox –≤ headless —Ä–µ–∂–∏–º–µ"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firefox –≤ headless —Ä–µ–∂–∏–º–µ
            firefox_options = Options()
            firefox_options.add_argument("--headless")
            firefox_options.add_argument("--width=1920")
            firefox_options.add_argument("--height=1080")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Firefox
            self.driver = webdriver.Firefox(options=firefox_options)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            self.current_paragraph = 0
            self.paragraphs = []
            self.related_links = []
            self.wait = WebDriverWait(self.driver, 15)
            self.last_request_time = 0
            
            print("‚úì –î—Ä–∞–π–≤–µ—Ä Firefox —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise
    
    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def wait_any_key(self, prompt="–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."):
        """–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–∏ (Windows), –ª–∏–±–æ Enter –Ω–∞ –¥—Ä—É–≥–∏—Ö –û–°"""
        try:
            import msvcrt  # –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Windows
            print(prompt, end="", flush=True)
            msvcrt.getch()
            print()
        except ImportError:
            input(f"{prompt} (Enter)")
    
    def rate_limit(self, min_delay=2, max_delay=4):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < min_delay:
            delay = random.uniform(min_delay, max_delay)
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
        
        self.last_request_time = time.time()
    
    def wait_for_page_load(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            self.wait.until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            time.sleep(1)
            return True
        except TimeoutException:
            print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
    
    def format_text(self, text, width=80):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
        if not text or text.strip() == "":
            return ""
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        text = ' '.join(text.split())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —à–∏—Ä–∏–Ω—ã
        formatted = textwrap.fill(text, width=width)
        return formatted
    
    def search_article(self, query):
        """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        try:
            self.rate_limit()
            
            print(f"üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏: {query}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∏–∫–∏–ø–µ–¥–∏–∏
            self.driver.get("https://ru.wikipedia.org/wiki/")
            
            # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            search_box = self.wait.until(
                EC.presence_of_element_located((By.NAME, "search"))
            )
            search_box.clear()
            search_box.send_keys(query)
            search_box.submit()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if not self.wait_for_page_load():
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç—å–∏
            try:
                # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏
                title = self.driver.find_element(By.ID, "firstHeading")
                if title:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {title.text}")
                    return True
            except NoSuchElementException:
                pass
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                search_results = self.driver.find_elements(By.CSS_SELECTOR, ".mw-search-result-heading a")
                if search_results:
                    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {len(search_results)}")
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    first_result = search_results[0]
                    print(f"üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: {first_result.text}")
                    first_result.click()
                    
                    if self.wait_for_page_load():
                        title = self.driver.find_element(By.ID, "firstHeading")
                        print(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ —Å—Ç–∞—Ç—å–µ: {title.text}")
                        return True
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞: {e}")
            
            print("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        except (TimeoutException, NoSuchElementException, WebDriverException) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return False
    
    def get_article_paragraphs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if not self.wait_for_page_load():
                print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return False
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
            content = self.driver.find_element(By.ID, "mw-content-text")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            paragraphs = content.find_elements(By.TAG_NAME, "p")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            filtered_paragraphs = []
            for p in paragraphs:
                text = p.text.strip()
                if (text and 
                    len(text) > 20 and 
                    not text.startswith("‚Üë") and
                    not text.startswith("‚Üë‚Üë") and
                    "edit" not in text.lower() and
                    "source" not in text.lower()):
                    filtered_paragraphs.append(text)
            
            self.paragraphs = filtered_paragraphs
            return len(filtered_paragraphs) > 0
            
        except NoSuchElementException:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {e}")
            return False
    
    def get_related_links(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ hatnote —ç–ª–µ–º–µ–Ω—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if not self.wait_for_page_load():
                print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return False
            
            # –ò—â–µ–º –≤—Å–µ div —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            elements = self.driver.find_elements(By.TAG_NAME, "div")
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(elements)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º hatnote —ç–ª–µ–º–µ–Ω—Ç—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏)
            hatnotes = []
            for element in elements:
                try:
                    cl = element.get_attribute("class")
                    if cl == "hatnote navigation-not-searchable ts-main":
                        hatnotes.append(element)
                except:
                    continue
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ hatnote —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π): {len(hatnotes)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ hatnote —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            related_links = []
            for hatnote in hatnotes:
                try:
                    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ hatnote
                    link_element = hatnote.find_element(By.TAG_NAME, "a")
                    href = link_element.get_attribute("href")
                    text = hatnote.text.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é
                    if (href and 
                        href.startswith("https://ru.wikipedia.org/wiki/") and
                        text and
                        len(text) > 5 and
                        not any(skip in href.lower() for skip in ["/edit", "/history", "/talk", "/special", "/user", "/file"])):
                        
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        clean_text = text.replace('\n', ' ').strip()
                        if clean_text:
                            related_links.append({
                                'text': clean_text,
                                'url': href
                            })
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ hatnote: {e}")
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            seen = set()
            unique_links = []
            for link in related_links:
                if link['text'] not in seen:
                    seen.add(link['text'])
                    unique_links.append(link)
            
            self.related_links = unique_links  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {len(self.related_links)}")
            
            return len(self.related_links) > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {e}")
            return False
    
    def display_paragraphs(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self.get_article_paragraphs():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å—Ç–∞—Ç—å–∏")
            return
        
        if not self.paragraphs:
            print("üìÑ –°—Ç–∞—Ç—å—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        self.current_paragraph = 0
        
        while True:
            self.clear_screen()
            
            if self.current_paragraph >= len(self.paragraphs):
                print("üìñ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç–∞—Ç—å–∏")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏
            try:
                title = self.driver.find_element(By.ID, "firstHeading").text
            except:
                title = "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            print(f"‚ïë {title[:76]:^76} ‚ïë")
            print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
            print()
            
            current_text = self.paragraphs[self.current_paragraph]
            formatted_text = self.format_text(current_text, 78)
            
            print(f"üìÑ –ü–∞—Ä–∞–≥—Ä–∞—Ñ {self.current_paragraph + 1}/{len(self.paragraphs)}:")
            print("‚îÄ" * 80)
            print(formatted_text)
            print("‚îÄ" * 80)
            print()
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            print("–ù–∞–≤–∏–≥–∞—Ü–∏—è: [Enter] - —Å–ª–µ–¥—É—é—â–∏–π, [2] - –Ω–∞–∑–∞–¥, [3] - –º–µ–Ω—é, [4] - –≤—ã—Ö–æ–¥")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == '4':
                break
            elif choice == '3':
                break
            elif choice == '2':
                if self.current_paragraph > 0:
                    self.current_paragraph -= 1
                else:
                    print("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç–∞—Ç—å–∏")
                    time.sleep(2)
            elif choice == '':  # Enter
                self.current_paragraph += 1
            else:  # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —Å–ª–µ–¥—É—é—â–∏–π
                self.current_paragraph += 1
    
    def show_related_pages(self):
        """–ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (hatnote) —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.get_related_links():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏")
            self.wait_any_key()
            return
        
        if not self.related_links:
            print("üîó –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.wait_any_key()
            return
        
        while True:
            self.clear_screen()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏
            try:
                current_title = self.driver.find_element(By.ID, "firstHeading").text
            except:
                current_title = "–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page_size = 15
            total = len(self.related_links)
            total_pages = max(1, (total + page_size - 1) // page_size)
            if not hasattr(self, '_related_page_index'):
                self._related_page_index = 0
            current_page = max(0, min(self._related_page_index, total_pages - 1))
            start = current_page * page_size
            end = min(start + page_size, total)
            
            print("üîó –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
            print("‚îÄ" * 80)
            print(f"üìñ –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è: {current_title}")
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü—ã: {current_page + 1}/{total_pages}  (–≤—Å–µ–≥–æ: {total})")
            print("‚îÄ" * 80)
            print()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for i, link in enumerate(self.related_links[start:end], start=1):
                display_text = link['text'][:60] + "..." if len(link['text']) > 60 else link['text']
                print(f"{i:2d}. {display_text}")
            
            print("‚îÄ" * 80)
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ (1-15) –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, '–¥' - –¥–∞–ª–µ–µ, '–Ω' - –Ω–∞–∑–∞–¥, '–º' - –º–µ–Ω—é, '–≤' - –≤—ã—Ö–æ–¥")
            
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
            
            if choice == '–≤':
                return
            elif choice == '–º':
                return
            elif choice == '–¥':
                if current_page < total_pages - 1:
                    self._related_page_index = current_page + 1
                else:
                    print("‚ö†Ô∏è –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    time.sleep(1)
            elif choice == '–Ω':
                if current_page > 0:
                    self._related_page_index = current_page - 1
                else:
                    print("‚ö†Ô∏è –≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    time.sleep(1)
            elif choice.isdigit():
                num = int(choice)
                if 1 <= num <= (end - start):
                    selected_link = self.related_links[start + num - 1]
                    print(f"üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞—Ç—å–µ: {selected_link['text']}")
                    try:
                        self.rate_limit()
                        self.driver.get(selected_link['url'])
                        if self.wait_for_page_load():
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –∫ —Å—Ç–∞—Ç—å–µ: {selected_link['text']}")
                            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
                            self.paragraphs = []
                            self.related_links = []
                            self.current_paragraph = 0
                            self._related_page_index = 0
                            time.sleep(1.2)
                            return
                        else:
                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: {e}")
                    time.sleep(1.2)
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    time.sleep(1)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
                time.sleep(1)
    
    def navigate_menu(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é"""
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –∏—Å–∫–∞—Ç—å
        print("üåê Wikipedia Navigator")
        print("=" * 50)
        print("üìù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?")
        
        # –ü–µ—Ä–≤–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
        while True:
            query = input("\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if query.lower() in ['q', 'quit', 'exit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return
            
            if query:
                if self.search_article(query):
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
                    self.paragraphs = []
                    self.related_links = []
                    self.current_paragraph = 0
                    break
                else:
                    print("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                    continue
            else:
                print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
        while True:
            self.clear_screen()
            
            print("üåê Wikipedia Navigator")
            print("=" * 50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç—å—é
            try:
                title = self.driver.find_element(By.ID, "firstHeading").text
                print(f"üìñ –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è: {title}")
            except:
                print("üìñ –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            print("\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            print("1. üìñ –õ–∏—Å—Ç–∞—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏")
            print("2. üîó –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö")
            print("3. üîé –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏")
            print("4. üö™ –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if choice == '1':
                self.display_paragraphs()
            elif choice == '2':
                self.show_related_pages()
            elif choice == '3':
                # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫: –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å, –Ω–∞–π—Ç–∏ –∏ –ø–µ—Ä–µ–π—Ç–∏
                while True:
                    query = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
                    if query.lower() in ['q', 'quit', 'exit', '–≤—ã—Ö–æ–¥']:
                        break
                    if not query:
                        print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                        continue
                    if self.search_article(query):
                        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
                        self.paragraphs = []
                        self.related_links = []
                        self.current_paragraph = 0
                        # –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
                        break
                    else:
                        print("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                        continue
            elif choice == '4':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                time.sleep(1)
    
    def __del__(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            if hasattr(self, 'driver'):
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä Firefox –∑–∞–∫—Ä—ã—Ç")
        except:
            pass


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Wikipedia Navigator...")
    
    try:
        navigator = WikipediaNavigator()
        navigator.navigate_menu()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –í–∏–∫–∏–ø–µ–¥–∏–∏")
    finally:
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        try:
            if 'navigator' in locals():
                del navigator
        except:
            pass
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()

